generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(cuid())
  name String
}

model User {
  // basic
  id                  String              @id @default(cuid())
  name                String
  surname             String
  password            String
  email               String              @unique
  emailVerified       Boolean             @default(false)
  accountType         AccountType         @default(Default)
  // profile
  birthday            DateTime
  description         String              @default("") @db.VarChar(500)
  photos              String[]
  gender              String
  city                String              @default("")
  sexualOrientation   SexualOrientation[]
  // matching
  showMeGender        ShowMeGender
  showMeAgeLowerLimit Int
  showMeAgeUpperLimit Int
  latitude            String
  longitude           String
  // others
  createdAt           DateTime            @default(now())
  // relations
  session             Session[]

  user       Like[] @relation("user")
  judgedUser Like[] @relation("judgedUser")

  firstUser  UsersRelation[] @relation("firstUser")
  secondUser UsersRelation[] @relation("secondUser")
  message    Message[]
  // what

  userMember        UserMember[]
  EmailVerification EmailVerification[]
  PasswordReset     PasswordReset[]
}

enum ShowMeGender {
  Male
  Female
  All
}

enum SexualOrientation {
  Heterosexual
  Gay
  Lesbian
  Bisexual
  Pansexual
  Demisexual
  Asexual
  Queer
  Undefined
}

enum AccountType {
  Default
  Silver
  Gold
  Black
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  country   String
  city      String
  userAgent String
  createdAt DateTime @default(now())
  // relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id           String     @id @default(cuid())
  userId       String
  jugdedUserId String
  typeOfLike   TypeOfLike
  createdAt    DateTime   @default(now())
  // relations
  user         User       @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  judgedUser   User       @relation("judgedUser", fields: [jugdedUserId], references: [id], onDelete: Cascade)
}

enum TypeOfLike {
  Default
  Super
}

model UsersRelation {
  id           String              @id @default(cuid())
  firstUserId  String
  secondUserId String
  relationType UsersRelationStatus
  createdAt    DateTime            @default(now())
  // relations
  firstUser    User                @relation("firstUser", fields: [firstUserId], references: [id], onDelete: Cascade)
  secondUser   User                @relation("secondUser", fields: [secondUserId], references: [id], onDelete: Cascade)
}

enum UsersRelationStatus {
  rejected
  accepted
}

model Conversation {
  id         String       @id @default(cuid())
  name       String
  membersIds UserMember[]
  createdAt  DateTime     @default(now())
  // relations
  message    Message[]
}

model UserMember {
  id             String       @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversationId String
  // relations

  @@id([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  userId         String
  conversationId String
  isDeleted      Boolean
  createdAt      DateTime     @default(now())
  // relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String
  createdAt DateTime @default(now())
  // relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  // relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
