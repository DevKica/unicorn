generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(cuid())
  name String
}

model User {
  // basic
  id                  String              @id @default(cuid())
  name                String
  surname             String
  password            String
  email               String              @unique
  emailVerified       Boolean             @default(false)
  accountType         AccountType
  // profile
  birthday            DateTime
  description         String              @db.VarChar(500)
  photos              String[]
  gender              String
  sexualOrientation   SexualOrientation[]
  // matching
  showMeGender        ShowMeGender
  showMeAgeLowerLimit Int
  showMeAgeUpperLimit Int
  latitude            Float
  longitude           Float
  // others
  createdAt           DateTime            @default(now())
  // relations
  session             Session[]

  userId       Likes[] @relation("userId")
  judgedUserId Likes[] @relation("judgedUserId")

  firstUserId UsersRelations[] @relation("firstUserId")
  secondUserId UsersRelations[] @relation("secondUserId")

  conversation Conversation[] @relation("members")
  message      Message[]
}

enum ShowMeGender {
  Male
  Female
  All
}

enum SexualOrientation {
  Heterosexual
  Gay
  Lesbian
  Bisexual
  Pansexual
  Demisexual
  Asexual
  Queer
  Undefined
}

enum AccountType {
  Default
  Silver
  Gold
  Black
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  country   String
  city      String
  userAgent String
  createdAt DateTime @default(now())
  // relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Likes {
  id                   String     @id @default(cuid())
  userId               String
  jugdedUserId         String
  typeOfLike           TypeOfLike
  createdAt            DateTime   @default(now())
  // relations
  user       User       @relation("userId", fields: [userId], references: [id], onDelete: Cascade)
  judgedUser User       @relation("judgedUserId", fields: [jugdedUserId], references: [id], onDelete: Cascade)
}

enum TypeOfLike {
  Default
  Super
}

model UsersRelations {
  id                   String       @id @default(cuid())
  firstUserId          String
  secondUserId         String
  relationType         Type
  createdAt            DateTime     @default(now())
  // relations
  firstUser  User         @relation("firstUserId", fields: [firstUserId], references: [id], onDelete: Cascade)
  secondUser User         @relation("secondUserId", fields: [secondUserId], references: [id], onDelete: Cascade)
}

enum Type {
  rejected
  accepted
}

model Conversation {
  id              String    @id @default(cuid())
  name            String
  members         String[]
  createdAt       DateTime  @default(now())
  // relations
  membersRelation User      @relation("members", fields: [members], references: [id])
  message         Message[]
}

model Message {
  id                   String       @id @default(cuid())
  content              String
  userId               String
  conversationId       String
  isDeleted            Boolean
  createdAt            DateTime     @default(now())
  // relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

